import React, { useState, useRef } from 'react'
import './MalwareScanner.css'

interface MalwareScannerProps {
  onClose: () => void
}

interface ScanResult {
  fileName: string
  fileSize: number
  fileType: string
  scanTime: string
  status: 'clean' | 'infected' | 'suspicious'
  threatsFound: Threat[]
  scanDetails: {
    signaturesChecked: number
    heuristicScore: number
    behavioralAnalysis: string[]
    md5Hash: string
    sha256Hash: string
  }
  engines: EngineResult[]
}

interface Threat {
  name: string
  type: 'virus' | 'trojan' | 'malware' | 'adware' | 'potentially_unwanted'
  severity: 'low' | 'medium' | 'high' | 'critical'
  description: string
}

interface EngineResult {
  name: string
  version: string
  result: 'clean' | 'infected'
  threatName?: string
  lastUpdate: string
}

const MalwareScanner: React.FC<MalwareScannerProps> = ({ onClose }) => {
  const [files, setFiles] = useState<FileList | null>(null)
  const [scanning, setScanning] = useState(false)
  const [results, setResults] = useState<ScanResult[]>([])
  const [dragActive, setDragActive] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true)
    } else if (e.type === 'dragleave') {
      setDragActive(false)
    }
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)

    const droppedFiles = e.dataTransfer.files
    if (droppedFiles && droppedFiles.length > 0) {
      handleFiles(droppedFiles)
    }
  }

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files
    if (selectedFiles && selectedFiles.length > 0) {
      handleFiles(selectedFiles)
    }
  }

  const handleFiles = (selectedFiles: FileList) => {
    // Check file count limit
    if (selectedFiles.length > 5) {
      alert('Maximum 5 files can be scanned at once')
      return
    }

    // Check individual file size (100MB limit)
    for (let i = 0; i < selectedFiles.length; i++) {
      if (selectedFiles[i].size > 100 * 1024 * 1024) {
        alert(`File "${selectedFiles[i].name}" is too large. Maximum file size is 100MB`)
        return
      }
    }

    setFiles(selectedFiles)
    setResults([])
  }

  const scanFiles = async () => {
    if (!files || files.length === 0) return

    setScanning(true)
    setScanProgress(0)
    setResults([])

    const scanResults: ScanResult[] = []

    for (let i = 0; i < files.length; i++) {
      const file = files[i]
      
      // Update progress
      setScanProgress(((i + 0.5) / files.length) * 100)

      try {
        // Simulate scanning delay
        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000))

        const result = await generateScanResult(file)
        scanResults.push(result)
        setResults([...scanResults])

      } catch (error) {
        console.error(`Failed to scan ${file.name}:`, error)
      }

      // Update progress to show completion of current file
      setScanProgress(((i + 1) / files.length) * 100)
    }

    setScanning(false)
  }

  const generateScanResult = async (file: File): Promise<ScanResult> => {
    // Generate hashes (mock implementation)
    await file.arrayBuffer()
    const md5Hash = generateMockHash(file.name, 32)
    const sha256Hash = generateMockHash(file.name + file.size, 64)

    // Determine if file is suspicious based on name/type
    const suspiciousExtensions = ['.exe', '.scr', '.bat', '.cmd', '.pif', '.jar']
    const suspiciousKeywords = ['crack', 'keygen', 'hack', 'virus', 'malware', 'trojan']
    
    const fileName = file.name.toLowerCase()
    const isSuspiciousExtension = suspiciousExtensions.some(ext => fileName.endsWith(ext))
    const isSuspiciousName = suspiciousKeywords.some(keyword => fileName.includes(keyword))
    
    let status: 'clean' | 'infected' | 'suspicious' = 'clean'
    let threatsFound: Threat[] = []
    
    // Generate threats based on file characteristics
    if (isSuspiciousName || (isSuspiciousExtension && Math.random() > 0.6)) {
      status = 'infected'
      threatsFound = generateThreats(fileName)
    } else if (isSuspiciousExtension && Math.random() > 0.8) {
      status = 'suspicious'
      threatsFound = generateSuspiciousThreats(fileName)
    }

    const behavioralAnalysis = generateBehavioralAnalysis(status, file.type)
    const engines = generateEngineResults(status, threatsFound)

    return {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type || 'unknown',
      scanTime: new Date().toISOString(),
      status,
      threatsFound,
      scanDetails: {
        signaturesChecked: Math.floor(Math.random() * 1000000) + 500000,
        heuristicScore: status === 'clean' ? Math.random() * 0.2 : Math.random() * 0.6 + 0.4,
        behavioralAnalysis,
        md5Hash,
        sha256Hash
      },
      engines
    }
  }

  const generateMockHash = (_input: string, length: number): string => {
    const chars = '0123456789abcdef'
    let result = ''
    for (let i = 0; i < length; i++) {
      result += chars[Math.floor(Math.random() * chars.length)]
    }
    return result
  }

  const generateThreats = (_fileName: string): Threat[] => {
    const malwareTypes = [
      {
        name: 'Trojan:Win32/GenKryptik.ABCD',
        type: 'trojan' as const,
        severity: 'high' as const,
        description: 'Generic trojan detection with encryption capabilities'
      },
      {
        name: 'Virus:Win32/Parite.B',
        type: 'virus' as const,
        severity: 'critical' as const,
        description: 'File infector virus that targets executable files'
      },
      {
        name: 'Malware:Win32/Suspicious.Gen',
        type: 'malware' as const,
        severity: 'medium' as const,
        description: 'Potentially malicious behavior detected'
      }
    ]

    const count = Math.floor(Math.random() * 2) + 1
    return malwareTypes.slice(0, count)
  }

  const generateSuspiciousThreats = (_fileName: string): Threat[] => {
    return [{
      name: 'PUA:Win32/Suspicious',
      type: 'potentially_unwanted',
      severity: 'low',
      description: 'Potentially unwanted application detected'
    }]
  }

  const generateBehavioralAnalysis = (status: string, _fileType: string): string[] => {
    if (status === 'clean') {
      return [
        'No suspicious API calls detected',
        'Normal file structure',
        'No network connections attempted'
      ]
    }

    const suspiciousActivities = [
      'Attempts to modify system registry',
      'Suspicious network communication',
      'File encryption behavior detected',
      'Process injection techniques found',
      'Anti-debugging mechanisms present',
      'Attempts to disable security software'
    ]

    const count = Math.floor(Math.random() * 3) + 2
    return suspiciousActivities.slice(0, count)
  }

  const generateEngineResults = (status: string, threats: Threat[]): EngineResult[] => {
    const engines = [
      'Windows Defender',
      'Kaspersky',
      'Norton',
      'Bitdefender',
      'Avast',
      'AVG',
      'F-Secure',
      'Trend Micro'
    ]

    return engines.map(name => {
      let result: 'clean' | 'infected' = 'clean'
      let threatName: string | undefined

      if (status === 'infected') {
        result = Math.random() > 0.2 ? 'infected' : 'clean'
        if (result === 'infected' && threats.length > 0) {
          threatName = threats[0].name
        }
      } else if (status === 'suspicious') {
        result = Math.random() > 0.7 ? 'infected' : 'clean'
        if (result === 'infected') {
          threatName = 'Suspicious'
        }
      }

      return {
        name,
        version: '2024.' + Math.floor(Math.random() * 365),
        result,
        threatName,
        lastUpdate: new Date(Date.now() - Math.random() * 86400000).toISOString()
      }
    })
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'clean': return '#10b981'
      case 'suspicious': return '#fbbf24'
      case 'infected': return '#ef4444'
      default: return '#6b7280'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'clean': return '‚úÖ'
      case 'suspicious': return '‚ö†Ô∏è'
      case 'infected': return 'üö®'
      default: return '‚ùì'
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return '#fbbf24'
      case 'medium': return '#fb923c'
      case 'high': return '#ef4444'
      case 'critical': return '#dc2626'
      default: return '#6b7280'
    }
  }

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <div className="malware-scanner-overlay">
      <div className="malware-scanner">
        <div className="scanner-header">
          <div className="header-info">
            <h2>üõ°Ô∏è Advanced Malware Scanner</h2>
            <p>Multi-engine malware detection with behavioral analysis</p>
          </div>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="scanner-content">
          {!files ? (
            <div 
              className={`file-upload-area ${dragActive ? 'drag-active' : ''}`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
              onClick={() => fileInputRef.current?.click()}
            >
              <div className="upload-icon">üõ°Ô∏è</div>
              <h3>Drop files here or click to browse</h3>
              <p>Upload up to 5 files, 100MB each</p>
              <p className="file-types">Supports all file types for comprehensive scanning</p>
              
              <input
                ref={fileInputRef}
                type="file"
                multiple
                onChange={handleFileInput}
                hidden
              />
            </div>
          ) : (
            <div className="scan-section">
              <div className="files-info">
                <h3>Files to Scan ({files.length})</h3>
                <div className="file-list">
                  {Array.from(files).map((file, index) => (
                    <div key={index} className="file-item">
                      <div className="file-icon">üìÑ</div>
                      <div className="file-details">
                        <div className="file-name">{file.name}</div>
                        <div className="file-meta">
                          {formatFileSize(file.size)} ‚Ä¢ {file.type || 'Unknown type'}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {!scanning && results.length === 0 && (
                <button className="scan-btn" onClick={scanFiles}>
                  <span>üîç</span>
                  Start Malware Scan
                </button>
              )}

              {scanning && (
                <div className="scanning-state">
                  <div className="scan-progress">
                    <div className="progress-circle">
                      <svg className="progress-ring" width="100" height="100">
                        <circle
                          className="progress-ring-circle-bg"
                          cx="50"
                          cy="50"
                          r="40"
                          fill="none"
                          stroke="rgba(55, 65, 81, 0.3)"
                          strokeWidth="8"
                        />
                        <circle
                          className="progress-ring-circle"
                          cx="50"
                          cy="50"
                          r="40"
                          fill="none"
                          stroke="var(--cyber-primary)"
                          strokeWidth="8"
                          strokeDasharray={`${(scanProgress / 100) * 251.2} 251.2`}
                          transform="rotate(-90 50 50)"
                        />
                      </svg>
                      <div className="progress-text">
                        <span className="progress-value">{Math.round(scanProgress)}%</span>
                      </div>
                    </div>
                  </div>
                  <h3>Scanning Files...</h3>
                  <p>Deep scanning with multiple engines</p>
                </div>
              )}

              {results.length > 0 && (
                <div className="scan-results">
                  <div className="results-header">
                    <h3>Scan Results</h3>
                    <div className="results-summary">
                      <span className="clean-count">
                        {results.filter(r => r.status === 'clean').length} Clean
                      </span>
                      <span className="suspicious-count">
                        {results.filter(r => r.status === 'suspicious').length} Suspicious
                      </span>
                      <span className="infected-count">
                        {results.filter(r => r.status === 'infected').length} Infected
                      </span>
                    </div>
                  </div>

                  <div className="results-list">
                    {results.map((result, index) => (
                      <div key={index} className={`result-card ${result.status}`}>
                        <div className="result-header">
                          <div className="file-info">
                            <h4>{result.fileName}</h4>
                            <p>{formatFileSize(result.fileSize)} ‚Ä¢ {result.fileType}</p>
                          </div>
                          <div 
                            className={`status-badge ${result.status}`}
                            style={{ borderColor: getStatusColor(result.status) }}
                          >
                            <span className="status-icon">{getStatusIcon(result.status)}</span>
                            <span className="status-text">{result.status.toUpperCase()}</span>
                          </div>
                        </div>

                        {result.threatsFound.length > 0 && (
                          <div className="threats-section">
                            <h5>Threats Detected</h5>
                            <div className="threats-list">
                              {result.threatsFound.map((threat, threatIndex) => (
                                <div key={threatIndex} className="threat-item">
                                  <div className="threat-info">
                                    <div className="threat-name">{threat.name}</div>
                                    <div className="threat-description">{threat.description}</div>
                                  </div>
                                  <div 
                                    className={`threat-severity ${threat.severity}`}
                                    style={{ color: getSeverityColor(threat.severity) }}
                                  >
                                    {threat.severity.toUpperCase()}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        <div className="result-details">
                          <div className="detail-tabs">
                            <div className="detail-section">
                              <h6>Scan Details</h6>
                              <div className="detail-grid">
                                <div className="detail-item">
                                  <span>Signatures Checked:</span>
                                  <span>{result.scanDetails.signaturesChecked.toLocaleString()}</span>
                                </div>
                                <div className="detail-item">
                                  <span>Heuristic Score:</span>
                                  <span>{(result.scanDetails.heuristicScore * 100).toFixed(1)}%</span>
                                </div>
                                <div className="detail-item">
                                  <span>MD5:</span>
                                  <span className="hash">{result.scanDetails.md5Hash}</span>
                                </div>
                                <div className="detail-item">
                                  <span>SHA256:</span>
                                  <span className="hash">{result.scanDetails.sha256Hash}</span>
                                </div>
                              </div>
                            </div>

                            <div className="detail-section">
                              <h6>Behavioral Analysis</h6>
                              <ul className="behavior-list">
                                {result.scanDetails.behavioralAnalysis.map((behavior, behaviorIndex) => (
                                  <li key={behaviorIndex}>{behavior}</li>
                                ))}
                              </ul>
                            </div>

                            <div className="detail-section engines-section">
                              <h6>Engine Results</h6>
                              <div className="engines-grid">
                                {result.engines.map((engine, engineIndex) => (
                                  <div key={engineIndex} className={`engine-result ${engine.result}`}>
                                    <div className="engine-name">{engine.name}</div>
                                    <div className="engine-status">
                                      {engine.result === 'clean' ? '‚úÖ' : 'üö®'}
                                    </div>
                                    {engine.threatName && (
                                      <div className="engine-threat">{engine.threatName}</div>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="results-actions">
                    <button className="action-btn secondary" onClick={() => {setFiles(null); setResults([])}}>
                      Scan New Files
                    </button>
                    <button className="action-btn primary">
                      Export Report
                    </button>
                    <button className="action-btn danger">
                      Quarantine Threats
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default MalwareScanner